// Generated by CoffeeScript 1.6.3
var Connexion, Graph, Model, User, attrModified, displayConnexions, displayFriends, displayGraph, friendSelected, graphClicked, h, initializeDisplay, initializePlugin, minutes_to_s, navigation, prefixZero, template, _ref, _ref1,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

Date.prototype.timeAgo = function() {
  var begin, day_number, end, now;
  now = new Date();
  end = new Date(now.getFullYear(), now.getMonth(), now.getDate());
  begin = new Date(this.getFullYear(), this.getMonth(), this.getDate());
  day_number = parseInt((end - begin) / (1000 * 60 * 60 * 24), 10);
  if (day_number === 0) {
    return "Today";
  } else {
    if (day_number === 1) {
      return "Yesturday";
    } else {
      return day_number + " days ago";
    }
  }
};

h = {
  isFunction: function(obj) {
    return Object.prototype.toString.call(obj) === "[object Function]";
  },
  keys: function(obj) {
    var key, _results;
    _results = [];
    for (key in obj) {
      _results.push(key);
    }
    return _results;
  },
  collect: function(array, iterator) {
    var val, _i, _len, _results;
    _results = [];
    for (_i = 0, _len = array.length; _i < _len; _i++) {
      val = array[_i];
      _results.push(iterator(val));
    }
    return _results;
  },
  compact: function(array) {
    var val, _i, _len, _results;
    _results = [];
    for (_i = 0, _len = array.length; _i < _len; _i++) {
      val = array[_i];
      if (val) {
        _results.push(val);
      }
    }
    return _results;
  }
};

prefixZero = function(value) {
  if (value < 10) {
    return "0" + value;
  } else {
    return "" + value;
  }
};

minutes_to_s = function(minutes) {
  var string;
  string = "";
  if (minutes > 60) {
    string += "" + (parseInt(minutes / 60, 10)) + "h";
    minutes /= 60;
  }
  if (minutes > 1) {
    string += "" + (parseInt(minutes, 10)) + "m";
    minutes -= parseInt(minutes, 10);
  }
  if (minutes > 0) {
    string += "" + (parseInt(minutes * 60, 10)) + "s";
  }
  return string;
};

Model = (function() {
  Model.db = openDatabase("FacebookConnect", "1.0", "Log all connexions from the Facebook chat", 5 * 1024 * 1024);

  Model.Type = {
    Integer: 1,
    Float: 2,
    String: 4,
    Date: 8,
    Bool: 16
  };

  Model.Constraints = {
    NotNull: 32,
    PrimaryKey: 64,
    Uniq: 128
  };

  Model.initialize = function() {
    return (new this()).check_table_exsist();
  };

  Model.sql = function(sql, values, callback) {
    var _this = this;
    return Model.db.transaction(function(tx) {
      return tx.executeSql(sql, values, callback, _this.database_error);
    });
  };

  Model.all = function(args, callback) {
    var conditions, instance, sql, values,
      _this = this;
    if (args == null) {
      args = {};
    }
    if (h.isFunction(args)) {
      callback = args;
      conditions = {};
    }
    instance = new this();
    sql = "SELECT ";
    if (args.select) {
      sql += args.select.join(", ");
    } else {
      sql += '*';
    }
    sql += " FROM " + instance.table_name;
    values = [];
    if (args.where) {
      sql += " WHERE " + args.where[0];
      values = args.where[1];
    }
    if (args.order) {
      sql += " ORDER BY " + (args.order.join(','));
    }
    if (args.limit) {
      sql += " LIMIT " + args.limit;
    }
    return Model.sql(sql, values, function(tx, result) {
      var collection, model, _i, _len, _ref;
      collection = [];
      _ref = result.rows;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        model = _ref[_i];
        collection.push(new _this(result.rows.item(_i)));
      }
      if (args.limit === 1) {
        collection = collection.length > 0 ? collection[0] : null;
      }
      if (callback) {
        return callback(collection, result);
      }
    });
  };

  Model.Collection = function(values) {
    var collection, save_item, value, _i, _len;
    save_item = function(collection, i, callback) {
      if (i >= collection.length) {
        return;
      }
      return collection[i].save(function() {
        if (i < collection.length - 1) {
          return save_item(collection, i + 1, callback);
        } else {
          if (callback) {
            return callback();
          }
        }
      });
    };
    collection = [];
    collection.save = function(callback) {
      return save_item(collection, 0, callback);
    };
    for (_i = 0, _len = values.length; _i < _len; _i++) {
      value = values[_i];
      collection.push(new this(value));
    }
    return collection;
  };

  function Model(data) {
    if (data == null) {
      data = {};
    }
    this._attributes = {};
    this.set(data);
  }

  Model.prototype.validate_flag = function(attribute, value) {
    return (this.attributes[attribute] & value) === value;
  };

  Model.prototype.is_type_of = function(attribute, type) {
    return this.validate_flag(attribute, type);
  };

  Model.prototype.has_constraint = function(attribute, constraint) {
    return this.validate_flag(attribute, constraint);
  };

  Model.prototype.get = function(attribute) {
    if (this.is_type_of(attribute, Model.Type.Bool)) {
      return this._attributes[attribute] === 1;
    } else if (this.is_type_of(attribute, Model.Type.INTEGER)) {
      return parseInt(this._attributes[attribute], 10);
    } else if (this.is_type_of(attribute, Model.Type.FLOAT)) {
      return parseFloat(this._attributes[attribute]);
    } else {
      return this._attributes[attribute];
    }
  };

  Model.prototype.set = function(data) {
    var attribute, int_date;
    for (attribute in this.attributes) {
      if (data[attribute]) {
        if (this.is_type_of(attribute, Model.Type.Integer)) {
          this._attributes[attribute] = parseInt(data[attribute]);
        } else if (this.is_type_of(attribute, Model.Type.Float)) {
          this._attributes[attribute] = parseFloat(data[attribute]);
        } else if (this.is_type_of(attribute, Model.Type.Bool)) {
          this._attributes[attribute] = data[attribute] ? 1 : 0;
        } else if (this.is_type_of(attribute, Model.Type.Date)) {
          if (("" + (parseInt(data[attribute]))) === data[attribute] || parseInt(data[attribute]) === data[attribute]) {
            int_date = parseInt(data[attribute]);
            while (int_date < 1000000000000) {
              int_date *= 10;
            }
            this._attributes[attribute] = new Date(int_date);
          } else {
            this._attributes[attribute] = new Date(Date.parse(data[attribute]));
          }
        } else {
          this._attributes[attribute] = data[attribute];
        }
      }
    }
  };

  Model.prototype.fetch = function(callback) {
    var _this = this;
    return Model.db.transaction(function(tx) {
      return tx.executeSql("SELECT * FROM " + _this.table_name + " WHERE id = ? LIMIT 1", [_this.get("id")], function(tx, result) {
        _this.set(result.rows.item(0));
        if (callback) {
          return callback(_this);
        }
      });
    });
  };

  Model.prototype.save = function(callback) {
    var _this = this;
    return Model.db.transaction(function(tx) {
      return tx.executeSql("SELECT * FROM " + _this.table_name + " WHERE id = ? LIMIT 1", [_this.get("id")], function(tx, result) {
        var attrs, keys, marks, old_object, to_update, values;
        attrs = _this.attributes;
        if (result.rows.length > 0) {
          old_object = result.rows.item(0);
          to_update = h.collect(h.keys(attrs), function(elem) {
            if (old_object[elem] !== _this.value_to_s(elem) && _this.value_to_s(elem)) {
              return "" + elem + "=?";
            }
          });
          values = h.collect(h.keys(attrs), function(elem) {
            if (old_object[elem] !== _this.value_to_s(elem) && _this.value_to_s(elem)) {
              return _this.value_to_s(elem);
            }
          });
          to_update = h.compact(to_update);
          if (to_update.length === 0) {
            if (callback) {
              callback(tx);
            }
            return;
          }
          values = h.compact(values);
          values.push(_this.get('id'));
          return tx.executeSql("UPDATE " + _this.table_name + " SET " + (to_update.join(',')) + " WHERE id = ?", values, callback, _this.database_error);
        } else {
          keys = h.collect(h.keys(attrs), function(elem) {
            if (_this._attributes[elem]) {
              return elem;
            }
          });
          marks = h.collect(h.keys(attrs), function(elem) {
            if (_this._attributes[elem]) {
              return '?';
            }
          });
          values = h.collect(h.keys(_this.attributes), function(elem) {
            return _this.value_to_s(elem);
          });
          keys = h.compact(keys);
          marks = h.compact(marks);
          values = h.compact(values);
          return tx.executeSql("INSERT INTO " + _this.table_name + " (" + (keys.join(',')) + ") VALUES (" + (marks.join(',')) + ")", values, callback, _this.database_error);
        }
      });
    });
  };

  Model.prototype.check_table_exsist = function(callback) {
    var _this = this;
    return Model.db.transaction(function(tx) {
      var attributes;
      attributes = h.collect(h.keys(_this.attributes), function(attr) {
        var values;
        values = [attr];
        if (_this.is_type_of(attr, Model.Type.Integer)) {
          values.push("INTEGER");
        } else if (_this.is_type_of(attr, Model.Type.Float)) {
          values.push("FLOAT");
        } else if (_this.is_type_of(attr, Model.Type.Bool)) {
          values.push("INTEGER");
        } else if (_this.is_type_of(attr, Model.Type.Date)) {
          values.push("TIMESTAMP");
        } else {
          values.push("TEXT");
        }
        if (_this.has_constraint(attr, Model.Constraints.PrimaryKey)) {
          values.push("PRIMARY KEY");
        }
        if (_this.has_constraint(attr, Model.Constraints.Uniq)) {
          values.push("UNIQ");
        }
        if (_this.has_constraint(attr, Model.Constraints.NotNull)) {
          values.push("NOT NULL");
        }
        return values.join(" ");
      });
      return tx.executeSql("CREATE TABLE IF NOT EXISTS " + _this.table_name + " (" + (attributes.join(',')) + ")", [], callback);
    });
  };

  Model.prototype.value_to_s = function(attribute) {
    if (this.is_type_of(attribute, Model.Type.Date)) {
      if (this._attributes[attribute]) {
        return this._attributes[attribute].getTime();
      }
    } else {
      return this._attributes[attribute];
    }
  };

  Model.prototype.database_error = function(tx, error) {
    return console.error(error);
  };

  return Model;

})();

User = (function(_super) {
  __extends(User, _super);

  function User() {
    _ref = User.__super__.constructor.apply(this, arguments);
    return _ref;
  }

  User.prototype.table_name = "Users";

  User.prototype.attributes = {
    id: Model.Type.Integer | Model.Constraints.PrimaryKey | Model.Constraints.NotNull,
    nickname: Model.Type.String | Model.Constraints.Uniq | Model.Constraints.NotNull,
    play_sound: Model.Type.Bool
  };

  User.prototype.connexions = function(callback) {
    return Connexion.all({
      where: ["user_id = ?", [this.get("id")]]
    }, callback);
  };

  User.prototype.connexionsGrouped = function(size, callback) {
    var c, connexions, count, sql, _i, _len;
    sql = "SELECT ? as step, COUNT(*) as count\nFROM (\n  SELECT  CAST(((CAST(start AS FLOAT) / " + size + ") - CAST(start / " + size + " AS INTEGER)) * " + size + " AS INTEGER) as min_start, \n          CAST(((CAST(end   AS FLOAT) / " + size + ") - CAST(end   / " + size + " AS INTEGER)) * " + size + " AS INTEGER) as min_end\n  FROM Connexions\n  WHERE user_id = ? AND end IS NOT NULL\n)\nWHERE ? BETWEEN min_start AND min_end";
    connexions = new Array(size);
    count = 0;
    for (_i = 0, _len = connexions.length; _i < _len; _i++) {
      c = connexions[_i];
      Connexion.sql(sql, [_i, this.get("id"), _i], function(tx, results) {
        connexions[results.rows.item(0).step] = results.rows.item(0).count;
        count++;
        if (count === connexions.length) {
          return callback(connexions);
        }
      });
    }
  };

  return User;

})(Model);

User.initialize();

Connexion = (function(_super) {
  __extends(Connexion, _super);

  function Connexion() {
    _ref1 = Connexion.__super__.constructor.apply(this, arguments);
    return _ref1;
  }

  Connexion.prototype.table_name = "Connexions";

  Connexion.prototype.attributes = {
    id: Model.Type.Integer | Model.Constraints.PrimaryKey | Model.Constraints.NotNull,
    user_id: Model.Type.Integer | Model.Constraints.NotNull,
    start: Model.Type.Date | Model.Constraints.NotNull,
    end: Model.Type.Date
  };

  Connexion.prototype.sound_url = "http://www.ibiblio.org/pub/multimedia/pc-sounds/connect.wav";

  Connexion.last = function(user_id, callback) {
    var time_shift;
    time_shift = (new Date()).getTime() - 15 * 1000;
    return Connexion.all({
      where: ["user_id = ? AND (end IS NULL OR end > ?)", [user_id, time_shift]],
      limit: 1,
      order: ["start DESC"]
    }, callback);
  };

  Connexion.updateAllMissingEnd = function() {
    return Connexion.sql("UPDATE " + Connexion.prototype.table_name + " SET end = ? WHERE end IS NULL", [(new Date()).getTime()]);
  };

  Connexion.prototype.save = function(callback) {
    var _this = this;
    return User.all({
      where: ["id = ?", [this.get("user_id")]],
      limit: 1
    }, function(user) {
      var audio;
      if (!user) {
        if (callback) {
          return callback();
        }
      } else {
        Connexion.__super__.save.call(_this, callback);
        if (user.get("play_sound") && !_this.get("end")) {
          audio = new Audio(_this.sound_url);
          return audio.play();
        }
      }
    });
  };

  Connexion.prototype.timeSpend = function() {
    var delta, end;
    end = this.get("end") || new Date();
    delta = end.getTime() - this.get("start").getTime();
    return (delta / 1000 / 60).toFixed(2);
  };

  Connexion.prototype.date_to_s = function(date) {
    var hours, minutes, seconds;
    hours = prefixZero(date.getHours());
    minutes = prefixZero(date.getMinutes());
    seconds = prefixZero(date.getSeconds());
    return "" + (date.timeAgo()) + " " + ([hours, minutes, seconds].join(":"));
  };

  Connexion.prototype.toString = function() {
    return "" + (this.date_to_s(this.get("start"))) + " <span style=\"float:right;\">(" + (minutes_to_s(this.timeSpend())) + ")<span>";
  };

  return Connexion;

})(Model);

Connexion.initialize();

Graph = (function() {
  Graph.prototype.options = {
    width: 204,
    height: 160,
    marges: 20,
    textshift: 14,
    separatorSize: 3,
    max: {
      x: 24
    }
  };

  function Graph(elem) {
    var height, template, width;
    this.elem = elem;
    width = this.options.width + 2 * this.options.marges;
    height = this.options.height + 2 * this.options.marges;
    template = "<svg xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\" width=\"" + width + "\" height=\"" + height + "\">\n  <g>\n    <path id=\"graph-data\" stroke-width=\"1\" stroke=\"#aaa\" fill=\"#bbb\"></path>\n    <line x1=\"" + this.options.marges + "\" x2=\"" + this.options.marges + "\" y1=\"" + this.options.marges + "\" y2=\"" + (this.options.marges + this.options.height) + "\" stroke=\"black\" stroke-width=\"q\"/>\n    <line x1=\"" + this.options.marges + "\" x2=\"" + (this.options.marges + this.options.width) + "\" y1=\"" + (this.options.marges + this.options.height) + "\" y2=\"" + (this.options.marges + this.options.height) + "\" stroke=\"black\" stroke-width=\"1\"/>\n    <text id=\"ymax\" x=\"" + (this.options.marges - this.options.textshift) + "\" y=\"" + this.options.marges + "\"></text>\n    <text id=\"half-ymax\" x=\"" + (this.options.marges - this.options.textshift) + "\" y=\"" + ((this.options.marges + this.options.marges + this.options.height) / 2) + "\"></text>\n    <text x=\"" + (this.options.marges - this.options.textshift) + "\" y=\"" + (this.options.marges + this.options.height + this.options.textshift) + "\">0</text>\n    <text x=\"" + ((this.options.marges + this.options.marges + this.options.width) / 2) + "\" y=\"" + (this.options.marges + this.options.height + this.options.textshift) + "\">" + (this.options.max.x / 2) + "</text>\n    <text x=\"" + (this.options.marges + this.options.width) + "\" y=\"" + (this.options.marges + this.options.height + this.options.textshift) + "\">" + this.options.max.x + "</text>\n  </g>\n</svg>";
    this.elem.setAttribute("width", width);
    this.elem.setAttribute("height", height);
    this.elem.innerHTML = template;
    this.path_elem = this.elem.querySelector("#graph-data");
  }

  Graph.prototype.updateScale = function() {
    var max;
    max = this.max();
    this.elem.querySelector("#half-ymax").textContent = max / 2;
    return this.elem.querySelector("#ymax").textContent = max;
  };

  Graph.prototype.max = function() {
    var d, _i, _len, _ref2;
    if (!this.data) {
      return;
    }
    if (this._max) {
      return this._max;
    }
    this._max = 0;
    _ref2 = this.data;
    for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
      d = _ref2[_i];
      if (d > this._max) {
        this._max = d;
      }
    }
    return this._max;
  };

  Graph.prototype.step = function() {
    var step;
    if (!this.data) {
      return;
    }
    step = parseInt(this.data.length / this.options.width, 10);
    if (step === 0) {
      step = 1;
    }
    return step;
  };

  Graph.prototype.display = function(data) {
    var avg, avgNormalized, end, i, number, path, sum, x;
    this.data = data;
    this.updateScale();
    i = 0;
    x = this.options.marges;
    path = ["M" + this.options.marges + " " + (this.options.height + this.options.marges)];
    while (i < this.data.length) {
      end = i + this.step();
      sum = 0;
      number = 0;
      while (i < end && i < this.data.length) {
        sum += this.data[i];
        number++;
        i++;
      }
      avg = sum / number;
      avgNormalized = parseInt((this.options.height + this.options.marges) - avg * this.options.height / this.max(), 10);
      path.push("L" + x + " " + avgNormalized);
      x += parseInt(this.options.width / (this.data.length - 1)) || 1;
    }
    x -= parseInt(this.options.width / (this.data.length - 1)) || 1;
    path.push("L" + x + " " + (this.options.height + this.options.marges));
    return this.path_elem.setAttribute("d", path.join(" "));
  };

  return Graph;

})();

attrModified = function(mutations) {
  var connected, id, mutation, name, newValue, split, _i, _len;
  for (_i = 0, _len = mutations.length; _i < _len; _i++) {
    mutation = mutations[_i];
    name = mutation.attributeName;
    newValue = mutation.target.getAttribute(name);
    if (name === "class") {
      connected = newValue.indexOf("connected") !== -1;
      split = mutation.target.querySelector("a").href.split("/");
      id = parseInt(split[split.length - 1], 10);
      if (newValue.indexOf("active") !== -1 && !connected) {
        Connexion.last(id, function(connexion) {
          mutation.target.classList.add("connected");
          if (!connexion) {
            connexion = new Connexion({
              user_id: id,
              start: new Date()
            });
            return connexion.save();
          }
        });
      }
      if (newValue.indexOf("active") === -1 && connected) {
        Connexion.last(id, function(connexion) {
          mutation.target.classList.remove("connected");
          if (connexion) {
            connexion.set({
              end: new Date()
            });
            return connexion.save();
          }
        });
      }
    }
  }
};

initializePlugin = function() {
  return User.all(function(users) {
    var elem, observer, user, _i, _len;
    for (_i = 0, _len = users.length; _i < _len; _i++) {
      user = users[_i];
      elem = document.querySelectorAll("[href='/messages/" + (user.get("id")) + "']")[0].parentNode;
      if (elem) {
        observer = new WebKitMutationObserver(attrModified);
        observer.observe(elem, {
          attributes: true
        });
        user.set({
          nickname: elem.querySelector(".accessible_elem").innerText
        });
        user.save();
        if (elem.classList.contains("active")) {
          attrModified([
            {
              attributeName: "class",
              target: elem
            }
          ]);
        }
      }
    }
  });
};

window.onbeforeunload = function() {
  return Connexion.updateAllMissingEnd();
};

template = "<li class=\"notifNegativeBase navItem\" id=\"friends_connexions\">\n  <div class=\"uiToggle flyoutMenu\" id=\"navAccount\">\n    <a class=\"navLink\" href=\"#\" rel=\"toggle\" role=\"button\" id=\"navAccountLink\">\n      <div class=\"menuPulldown\">Account Settings</div>\n    </a>\n    <div class=\"jewelFlyout fbJewelFlyout uiToggleFlyout\" id=\"accountSettingsFlyout\" tabindex=\"0\" style=\"width: auto;\">\n      <div class=\"jewelBeeperHeader\"><div class=\"beeperNubWrapper\"><div class=\"beeperNub\"></div></div></div>\n      <ul class=\"navigation\" style=\"max-height:300px; overflow: auto; width: auto;\"></ul>\n    </div>\n  </div>\n</li>";

navigation = null;

friendSelected = function(e) {
  displayConnexions(e.target.dataset.id);
  e.preventDefault();
  e.stopPropagation();
  return false;
};

graphClicked = function(e) {
  displayGraph(e.target.dataset.id);
  e.preventDefault();
  e.stopPropagation();
  return false;
};

displayConnexions = function(id) {
  return User.all({
    where: ["id = ?", [id]],
    limit: 1
  }, function(user) {
    if (!user) {
      throw "error with user id...";
    }
    navigation.innerHTML = "<li><div class=\"pagesNavMenuTitle fsm fwn fcg\">" + (user.get("nickname")) + ":</div></li>";
    return Connexion.all({
      where: ["user_id = ?", [user.get("id")]],
      order: ["start DESC"]
    }, function(connexions) {
      var connexion, _i, _len;
      navigation.innerHTML += "<li><a class=\"navSubmenu displayGraph\" href=\"#graph\" data-id=\"" + (user.get("id")) + "\">show graph</a></li>";
      for (_i = 0, _len = connexions.length; _i < _len; _i++) {
        connexion = connexions[_i];
        navigation.innerHTML += "<li><time style=\"margin:0 5px;display: block;\">" + (connexion.toString()) + "</time></li>";
      }
      return document.querySelector(".navSubmenu.displayGraph").addEventListener("click", graphClicked);
    });
  });
};

displayGraph = function(id) {
  return User.all({
    where: ["id = ?", [id]],
    limit: 1
  }, function(user) {
    var graph;
    if (!user) {
      throw "error with user id...";
    }
    navigation.innerHTML = "<li><div class=\"pagesNavMenuTitle fsm fwn fcg\">Graph " + (user.get("nickname")) + ":</div></li>";
    navigation.innerHTML += "<li class=\"graph\"></li>";
    graph = new Graph(navigation.querySelector(".graph"));
    return user.connexionsGrouped(24, function(connexions) {
      return graph.display(connexions);
    });
  });
};

displayFriends = function() {
  navigation.innerHTML = "<li><div class=\"pagesNavMenuTitle fsm fwn fcg\">Friends:</div></li>";
  return User.all({
    order: ["nickname ASC"]
  }, function(users) {
    var friend, user, _i, _j, _len, _len1, _ref2;
    for (_i = 0, _len = users.length; _i < _len; _i++) {
      user = users[_i];
      navigation.innerHTML += "<li><a class=\"navSubmenu friend\" href=\"#" + (user.get("id")) + "\" data-id=\"" + (user.get("id")) + "\">" + (user.get("nickname")) + "</a></li>";
    }
    _ref2 = navigation.querySelectorAll(".friend");
    for (_j = 0, _len1 = _ref2.length; _j < _len1; _j++) {
      friend = _ref2[_j];
      friend.addEventListener("click", friendSelected);
    }
  });
};

initializeDisplay = function() {
  document.querySelector("#pageNav").innerHTML += template;
  navigation = document.querySelector("#friends_connexions .navigation");
  return document.querySelector("#friends_connexions .navLink").addEventListener("click", displayFriends);
};

window.onload = function() {
  initializeDisplay();
  return setTimeout(initializePlugin, 5000);
};
